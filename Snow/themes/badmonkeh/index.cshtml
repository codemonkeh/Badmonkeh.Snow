@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<Snow.ViewModels.ContentViewModel>
@using System.Collections.Generic
@{
  Layout = "default.cshtml";
}
  <div class="posts">
    @foreach(var postPaged in Model.PostsPaged) {
    
	<article class="post type-post status-publish format-standard hentry">
		<header class="entry-header">
			<h1 class="entry-title"><a href="@postPaged.Url">@postPaged.Title</a></h1>

			<div class="entry-meta">
				<span class="sep">Posted on </span>@postPaged.Date.ToString("dd MMM yyyy")
			</div><!-- .entry-meta -->
		</header><!-- .entry-header -->

		<div class="entry-content">
			@Html.RenderSeries(postPaged)

			@Html.Raw(postPaged.Content)
		</div><!-- .entry-content -->
		
		<footer class="entry-meta">
			<span class="cat-links">
				<span class="entry-utility-prep entry-utility-prep-tag-links">Categories</span> 
					@postPaged.Categories.Aggregate("", (x, y) => x + ", " + y).TrimStart(new [] {',',' '})
			</span>
			<span class="sep"> | </span>
			<span class="tag-links"> 
				<span class="entry-utility-prep entry-utility-prep-tag-links">Tagged</span> 
					@postPaged.Tags.Aggregate("", (x, y) => x + ", " + y).TrimStart(new [] {',',' '})
			</span>
		</footer><!-- .entry-meta -->
	</article>
    }
  </div> 

  <!-- Pagination links -->
  <div id="post-pagination" class="pagination">

   
     @if (Model.HasPreviousPage) {
      if (Model.PreviousPage == 1) {
      <p class="previous">
        <a href="/">Previous Page</a>
      </p>
      }
      else {
      <p class="previous">
        <a href="/page@(Model.PreviousPage)">Previous Page</a>
        </p>
      }
    }

    @if (!Model.HasPreviousPage) {
    
      <!--<a href="/">Previous Page</a>-->
    
    }

    @if (Model.HasNextPage) {
    <p class="previous">
      <a href="/page@(Model.NextPage)">Next Page</a>
    </p>
    }

  </div>

